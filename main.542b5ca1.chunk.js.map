{"version":3,"sources":["login.js","serviceWorker.js","index.js"],"names":["Login","props","state","login","password","handleLoginChange","changeLogin","bind","handlePasswordChange","changePassword","event","this","setState","target","value","type","onChange","onClick","parent","Component","Recording","granted","rejectedReason","recording","paused","job_name","undefined","handleStart","handleStop","handleStreamClose","jobname","console","log","token","errormessage","stream","blob","send_rec","FileReader","readAsDataURL","onloadend","dataUrl","result","base64data","split","theobject","formparameters","method","body","JSON","stringify","headers","transcriberserver","fetch","then","data","status","failedauthenticated2","Error","json","thetoken","authenticated2","jobnameCallback","catch","error","message","err","ref","constraints","audio","mimeType","timeSlice","onStart","onStop","onError","handleError","onStreamClosed","render","start","stop","toString","React","Transcription","transcribed","timerid","handleDestinationChange","changeDestination","transcriptionserver","timer","clearInterval","authenticated","setInterval","tick","getDestinationCallback","Evaluation","evaluationCallback","Page","destination","evaluation","loginserver","failedauthenticated","eva","evaluationserver","dest","sendEvaluation","doLogin","handleJobNameCallback","getDestination","handleEvaluationCallback","Final","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.542b5ca1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport MediaCapturer from 'react-multimedia-capture';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {login : '', password : ''}\r\n\r\n        this.handleLoginChange = this.changeLogin.bind(this);\r\n        this.handlePasswordChange = this.changePassword.bind(this);\r\n    }\r\n\r\n    changeLogin(event) {\r\n        this.setState({ login : event.target.value })\r\n    }\r\n\r\n    changePassword(event) {\r\n        this.setState({ password : event.target.value })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <form>\r\n                <h2>Login</h2>\r\n                Login <input type=\"text\" value={this.state.login} onChange={this.handleLoginChange}/> <br/>\r\n                Password <input type=\"password\" value={this.state.password} onChange={this.handlePasswordChange}/> <br/>\r\n                <input type=\"button\" value=\"submit\" onClick={this.props.login.bind(this.props.parent, this.state.login, this.state.password)}/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nclass Recording extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tgranted: false,\r\n\t\t\trejectedReason: '',\r\n\t\t\trecording: false,\r\n            paused: false,\r\n            job_name: undefined\r\n\t\t};\r\n\r\n\t\tthis.handleStart = this.handleStart.bind(this);\r\n\t\tthis.handleStop = this.handleStop.bind(this);\r\n\t\tthis.handleStreamClose = this.handleStreamClose.bind(this);\r\n\t\t\r\n    }\r\n    \r\n  \r\n    authenticated2(jobname) {\r\n        this.setState(() => {\r\n            return {job_name: jobname};\r\n          });    \r\n        console.log(\"JOB_NAME RECORDING ---> \" + this.state.job_name)\r\n    }\r\n\r\n    failedauthenticated2() {\r\n        this.setState(() => {\r\n            return { token : undefined, errormessage : 'Authentication Error' };\r\n          });    \r\n    }\r\n    \r\n    \r\n\thandleStart(stream) {\r\n\t\tthis.setState({\r\n\t\t\trecording: true\r\n\t\t});\r\n\r\n\t\tconsole.log('Recording Started.');\r\n\t}\r\n\thandleStop(blob) {\r\n        //blob tem o audio\r\n        // fazer o post aqui\r\n\t\tthis.setState({\r\n\t\t\trecording: false\r\n\t\t});\r\n\r\n        console.log('Recording Stopped.');\r\n        console.log(blob);\r\n        //this.downloadAudio(blob);\r\n        \r\n        //post e fetch da info na lambda func do API Gateway AWS\r\n\r\n\t\tconsole.log(\"auth token in recorder --> \" + this.props.token );\r\n        \r\n        //pack recording to POST\r\n        \r\n        let send_rec = new FileReader();\r\n        send_rec.readAsDataURL(blob);\r\n        send_rec.onloadend = () => {\r\n            var dataUrl = send_rec.result;\r\n            var base64data = dataUrl.split(',')[1];\r\n            console.log(\"datUrl \" + dataUrl);\r\n            console.log(\"ENCODED ---- \" + base64data);   \r\n         \r\n            \r\n            //fetch\r\n\r\n            var theobject = this\r\n            var formparameters = {\r\n                method: 'POST', // or 'PUT'\r\n                body: JSON.stringify({'token' : this.props.token, 'audio_encoded' : base64data}),\r\n                headers:{\r\n                'Content-Type': 'application/json',\r\n                'authorizationToken' : JSON.stringify({ 'token' : this.props.token })\r\n                }\r\n            }\r\n            \r\n            console.log(formparameters);\r\n            console.log('trancriber server ->  ' + this.props.transcriberserver);\r\n\r\n            fetch(this.props.transcriberserver, formparameters).then(function(data) {\r\n                \r\n                        if(data.status!==200) {\r\n                            theobject.failedauthenticated2()\r\n                            throw new Error(data.status)\r\n                        }\r\n                        else {\r\n                            var json = data.json();\r\n                            return json;\r\n                        }\r\n            }).then((thetoken) => {\r\n                        console.log('message =', thetoken)\r\n                        if ('token' in thetoken){\r\n                            console.log(\"THETOKEN \" + thetoken['TranscriptionJobName'])\r\n                            console.log(theobject)\r\n                            theobject.authenticated2(thetoken['TranscriptionJobName'])\r\n                            this.props.jobnameCallback(this.state.job_name)\r\n                        }\r\n            }).catch(function(error) {\r\n                        console.log('There has been a problem with your fetch operation: ', error.message)\r\n                    });   \r\n        }\r\n    }\r\n\r\n\r\n\thandleStreamClose() {\r\n\t\tthis.setState({\r\n\t\t\tgranted: false\r\n\t\t});\r\n\t}\r\n\thandleError(err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n\t \r\n\trender() {\r\n\t\tconst recording = this.state.recording;\r\n        \r\n\t\treturn (\r\n\t\t\t<div ref=\"app\">\r\n\t\t\t\t<h3>Recording your Destination</h3>\r\n\t\t\t\t<MediaCapturer\r\n\t\t\t\t\tconstraints={{ audio: true }}\r\n\t\t\t\t\tmimeType=\"audio/webm\"\r\n\t\t\t\t\ttimeSlice={10}\r\n\t\t\t\t\tonStart={this.handleStart}\r\n                    onStop={this.handleStop}\r\n\t\t\t\t\tonError={this.handleError} \r\n\t\t\t\t\tonStreamClosed={this.handleStreamClose}\r\n\t\t\t\t\trender={({ start, stop }) => \r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p>Recording: {recording.toString()}</p>\r\n\t\t\t\t\t\t<button onClick={start}>Start</button>\r\n\t\t\t\t\t\t<button onClick={stop}>Stop</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass Transcription extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { transcribed: undefined, timerid : undefined};\r\n\r\n        this.handleDestinationChange = this.changeDestination.bind(this);\r\n    }\r\n\r\n\r\n    changeDestination(event) {\r\n        this.setState({ transcribed : event.target.value })\r\n    }\r\n\r\n    authenticated(value) {\r\n        console.log(value)\r\n        this.setState(() => {\r\n            return {transcribed: value};\r\n          });    \r\n        console.log(\"JOB_NAME TRANSCRIBED ---> \" + this.state.transcribed)\r\n    }\r\n\r\n\r\n    tick() {\r\n        // Call this function so that it fetch first time right after mounting the component\r\n        var theobject = this\r\n        var formparameters = {\r\n            method: 'POST', // or 'PUT'\r\n            body: JSON.stringify({'token' : this.props.token, 'job_name' : this.props.job_name + \".json\"}),   //TODO QUANDO CONVERTER PARA MP3 ARRUMAR ISSO E ADICIONAR O .JSON NO SETSTATE DA RECORDER\r\n            headers:{\r\n            'Content-Type': 'application/json',\r\n            'authorizationToken' : JSON.stringify({ 'token' : this.props.token })\r\n            }\r\n        }\r\n        \r\n        console.log(formparameters);\r\n        console.log('trancriber server ->  ' + this.props.transcriptionserver);\r\n\r\n        fetch(this.props.transcriptionserver, formparameters).then((data) => {\r\n            \r\n                    if(data.status!==200) {\r\n                        throw new Error(data.status)\r\n                    }\r\n                    else {\r\n                        var json = data.json();\r\n                        this.timer = clearInterval(this.timer);\r\n                        return json;\r\n                    }\r\n        }).then((thetoken) => {\r\n                    console.log('message =', thetoken)\r\n                    console.log(theobject)\r\n                    theobject.authenticated(thetoken['transcription'])\r\n\r\n\r\n        }).catch(function(error) {\r\n                    console.log('There has been a problem with your fetch operation: ', error.message)\r\n                }); \r\n\r\n        // set Interval\r\n    }\r\n    \r\n    componentDidMount() {\r\n        // Clear the interval right before component unmount\r\n        this.timer = setInterval(() => this.tick(), 5000)\r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.state.transcribed != undefined){\r\n            return (\r\n                <div>\r\n                    Location (You can modify the text)<input type=\"text\" value={this.state.transcribed} onChange={this.handleDestinationChange}/><br/>\r\n                    <input type=\"button\" value=\"Submit\" onClick={this.props.getDestinationCallback.bind(this.props.parent, this.state.transcribed)}/>\r\n                    <input type=\"button\" value=\"Repeat\" onClick={this.props.jobnameCallback.bind(this.props.parent, undefined)}/>\r\n                </div>\r\n               \r\n            );\r\n        }\r\n        else{\r\n            return (\r\n                <div>\r\n                    <h2>Transcribing...</h2>\r\n    \r\n                </div>\r\n               \r\n            );\r\n        }\r\n      \r\n    }\r\n    \r\n}\r\n\r\nclass Evaluation extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                Rate your Ride<br/>\r\n                <input type=\"button\" value=\"1\" onClick={this.props.evaluationCallback.bind(this.props.parent, 1)}/>\r\n                <input type=\"button\" value=\"2\" onClick={this.props.evaluationCallback.bind(this.props.parent, 2)}/>\r\n                <input type=\"button\" value=\"3\" onClick={this.props.evaluationCallback.bind(this.props.parent, 3)}/>\r\n                <input type=\"button\" value=\"4\" onClick={this.props.evaluationCallback.bind(this.props.parent, 4)}/>\r\n                <input type=\"button\" value=\"5\" onClick={this.props.evaluationCallback.bind(this.props.parent, 5)}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nclass Page extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {token : undefined, errormessage : undefined, job_name: undefined, destination: undefined, evaluation: undefined};\r\n    }\r\n\r\n    authenticated(token) {\r\n        this.setState({ token : token, errormessage : undefined })\r\n    }\r\n\r\n    failedauthenticated() {\r\n        this.setState({ token : undefined, errormessage : 'Authentication Error' })\r\n    }\r\n\r\n    doLogin(login, password) {\r\n        var theobject = this\r\n        var formparameters = {\r\n            method: 'POST', // or 'PUT'\r\n            body: JSON.stringify({'login' : login, 'password' : password}),\r\n            headers:{\r\n              'Content-Type': 'application/json',\r\n            }\r\n        }\r\n        console.log(formparameters);\r\n        console.log(\"loginserver --> \" + this.props.loginserver);\r\n  fetch(this.props.loginserver, formparameters).then(function(data) {\r\n            if(data.status!==200) {\r\n                theobject.failedauthenticated()\r\n                throw new Error(data.status)\r\n            }\r\n            else {\r\n                var json = data.json();\r\n                return json;\r\n            }\r\n  }).then(function(thetoken) {\r\n            console.log('message =', thetoken)\r\n            if ('token' in thetoken)\r\n                theobject.authenticated(thetoken['token'])\r\n  }).catch(function(error) {\r\n            console.log('There has been a problem with your fetch operation: ', error.message);\r\n        });\r\n\r\n        console.log(\"TOKEN --> \" + this.props.token);\r\n    }\r\n\r\n    sendEvaluation(eva) {\r\n        var formparameters = {\r\n            method: 'POST', // or 'PUT'\r\n            body: JSON.stringify({'token' : this.state.token, 'evaluation' : eva.toString()}),\r\n            headers:{\r\n              'Content-Type': 'application/json',\r\n              'authorizationToken': JSON.stringify({ 'token' : this.state.token })\r\n            }\r\n        }\r\n        console.log(formparameters);\r\n        console.log(\"evaluationserver --> \" + this.props.evaluationserver);\r\n  fetch(this.props.evaluationserver, formparameters).then(function(data) {\r\n            if(data.status!==200) {\r\n                throw new Error(data.status)\r\n            }\r\n            else {\r\n                var json = data.json();\r\n                return json;\r\n            }\r\n  }).then(function(thetoken) {\r\n            console.log('message =', thetoken)\r\n  }).catch(function(error) {\r\n            console.log('There has been a problem with your fetch operation: ', error.message);\r\n        });\r\n\r\n    }\r\n\r\n    getDestination(dest){\r\n        this.setState(() => {\r\n            return { destination: dest };\r\n          });  \r\n    }\r\n\r\n    handleJobNameCallback(jobname){\r\n        this.setState(() => {\r\n            return { job_name: jobname };\r\n          });  \r\n    }\r\n    \r\n    \r\n    handleEvaluationCallback(eva){\r\n        this.setState(() => {\r\n            return { token:undefined, evaluation: eva };\r\n          });  \r\n\r\n        this.sendEvaluation(eva)\r\n    }\r\n\r\n    render() {\r\n        console.log(\"Evaluation\", this.state.evaluation)\r\n        if (this.state.errormessage != undefined)\r\n            var errormessage = <h2>{this.state.errormessage}</h2>\r\n        else\r\n            var errormessage = <div/>\r\n        if (this.state.token == undefined)\r\n            return (\r\n                <div>\r\n                    {errormessage}\r\n                    <Login parent={this} login={this.doLogin}/>\r\n                </div>\r\n            )\r\n        if(this.state.job_name != undefined && this.state.destination == undefined){\r\n            return(\r\n                <div>\r\n                    {errormessage}\r\n                    <Transcription parent={this} jobnameCallback={this.handleJobNameCallback} getDestinationCallback={this.getDestination} transcriptionserver={this.props.transcriptionserver} token={this.state.token} job_name={this.state.job_name}/>\r\n                </div>\r\n            )\r\n        }\r\n        if(this.state.job_name != undefined && this.state.destination != undefined){\r\n            return(\r\n                <div>\r\n                    {errormessage}\r\n                    <Evaluation  parent={this} evaluationCallback={this.handleEvaluationCallback}/>\r\n                </div>\r\n            )\r\n        }\r\n        else\r\n            return (\r\n                <div>\r\n                    {errormessage}\r\n                    <Recording jobnameCallback={this.handleJobNameCallback.bind(this)} transcriberserver = {this.props.transcriberserver} token = {this.state.token} job_name = {this.state.job_name}/>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nclass Final extends Component{\r\n    \r\n    render(){\r\n        return (\r\n            <Page loginserver=\"https://fx49oebdf7.execute-api.us-east-1.amazonaws.com/Production/login\" transcriberserver=\"https://fx49oebdf7.execute-api.us-east-1.amazonaws.com/Production/time\" transcriptionserver=\"https://fx49oebdf7.execute-api.us-east-1.amazonaws.com/Production/transcript\" evaluationserver=\"https://fx49oebdf7.execute-api.us-east-1.amazonaws.com/Production/evaluation\"/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Final;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Final from './login';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Final />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}