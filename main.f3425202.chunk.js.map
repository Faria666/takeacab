{"version":3,"sources":["login.js","serviceWorker.js","index.js"],"names":["Login","props","state","login","password","handleLoginChange","changeLogin","bind","handlePasswordChange","changePassword","event","this","setState","target","value","type","onChange","onClick","parent","Component","Recording","granted","rejectedReason","recording","paused","handleStart","handleStop","handleStreamClose","stream","console","log","blob","token","theobject","formparameters","method","body","JSON","stringify","headers","transcriberserver","fetch","then","data","status","failedauthenticated","Error","json","thetoken","authenticated","catch","error","message","err","ref","constraints","audio","mimeType","timeSlice","onStart","onStop","onError","handleError","onStreamClosed","render","start","stop","toString","React","Page","undefined","errormessage","loginserver","doLogin","Final","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3425202.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport MediaCapturer from 'react-multimedia-capture';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {login : '', password : ''}\r\n\r\n        this.handleLoginChange = this.changeLogin.bind(this);\r\n        this.handlePasswordChange = this.changePassword.bind(this);\r\n    }\r\n\r\n    changeLogin(event) {\r\n        this.setState({ login : event.target.value })\r\n    }\r\n\r\n    changePassword(event) {\r\n        this.setState({ password : event.target.value })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <form>\r\n                <h2>Login</h2>\r\n                Login <input type=\"text\" value={this.state.login} onChange={this.handleLoginChange}/> <br/>\r\n                Password <input type=\"password\" value={this.state.password} onChange={this.handlePasswordChange}/> <br/>\r\n                <input type=\"button\" value=\"submit\" onClick={this.props.login.bind(this.props.parent, this.state.login, this.state.password)}/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nclass Recording extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tgranted: false,\r\n\t\t\trejectedReason: '',\r\n\t\t\trecording: false,\r\n\t\t\tpaused: false\r\n\t\t};\r\n\r\n\t\tthis.handleStart = this.handleStart.bind(this);\r\n\t\tthis.handleStop = this.handleStop.bind(this);\r\n\t\tthis.handleStreamClose = this.handleStreamClose.bind(this);\r\n\t\t//this.downloadAudio = this.downloadAudio.bind(this);\r\n\t}\r\n\t\r\n\thandleStart(stream) {\r\n\t\tthis.setState({\r\n\t\t\trecording: true\r\n\t\t});\r\n\r\n\t\tconsole.log('Recording Started.');\r\n\t}\r\n\thandleStop(blob) {\r\n        //blob tem o audio\r\n        // fazer o post aqui\r\n\t\tthis.setState({\r\n\t\t\trecording: false\r\n\t\t});\r\n\r\n        console.log('Recording Stopped.');\r\n        console.log(blob);\r\n        //this.downloadAudio(blob);\r\n        \r\n        //post e fetch da info na lambda func do API Gateway AWS\r\n\r\n\t\tconsole.log(\"auth token in recorder --> \" + this.props.token );\r\n\t\t\r\n        var theobject = this\r\n        var formparameters = {\r\n            method: 'POST', // or 'PUT'\r\n            body: JSON.stringify({'recording' : blob}),\r\n            headers:{\r\n\t\t\t  'Content-Type': 'application/json',\r\n\t\t\t  'authorizationToken' : JSON.stringify({ 'token' : this.props.token })\r\n            }\r\n\t\t}\r\n\t\tconsole.log(formparameters);\r\n        console.log('trancriber server ->  ' + this.props.transcriberserver);\r\n\r\n  fetch(this.props.transcriberserver, formparameters).then(function(data) {\r\n\t  \r\n            if(data.status!==200) {\r\n                theobject.failedauthenticated()\r\n                throw new Error(data.status)\r\n            }\r\n            else {\r\n                var json = data.json();\r\n                return json;\r\n            }\r\n  }).then(function(thetoken) {\r\n            console.log('message =', thetoken)\r\n            if ('token' in thetoken)\r\n                theobject.authenticated(thetoken['token'])\r\n  }).catch(function(error) {\r\n            console.log('There has been a problem with your fetch operation: ', error.message);\r\n        });\r\n\r\n\t}\r\n\t\r\n\thandleStreamClose() {\r\n\t\tthis.setState({\r\n\t\t\tgranted: false\r\n\t\t});\r\n\t}\r\n\thandleError(err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n\t/*downloadAudio(blob) {\r\n\t\tlet url = URL.createObjectURL(blob);\r\n\t\tlet a = document.createElement('a');\r\n\t\ta.style.display = 'none';\r\n\t\ta.href = url;\r\n\t\ta.target = '_blank';\r\n\t\tdocument.body.appendChild(a);\r\n\r\n\t\ta.click();\r\n\t}*/\r\n\trender() {\r\n\t\tconst recording = this.state.recording;\r\n        \r\n\t\treturn (\r\n\t\t\t<div ref=\"app\">\r\n\t\t\t\t<h3>Recording your Destiny</h3>\r\n\t\t\t\t<MediaCapturer\r\n\t\t\t\t\tconstraints={{ audio: true }}\r\n\t\t\t\t\tmimeType=\"audio/webm\"\r\n\t\t\t\t\ttimeSlice={10}\r\n\t\t\t\t\tonStart={this.handleStart}\r\n                    onStop={this.handleStop}\r\n\t\t\t\t\tonError={this.handleError} \r\n\t\t\t\t\tonStreamClosed={this.handleStreamClose}\r\n\t\t\t\t\trender={({ start, stop }) => \r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p>Recording: {recording.toString()}</p>\r\n\t\t\t\t\t\t<button onClick={start}>Start</button>\r\n\t\t\t\t\t\t<button onClick={stop}>Stop</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nclass Page extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {token : undefined, errormessage : undefined };\r\n    }\r\n\r\n    authenticated(token) {\r\n        this.setState({ token : token, errormessage : undefined })\r\n    }\r\n\r\n    failedauthenticated() {\r\n        this.setState({ token : undefined, errormessage : 'Authentication Error' })\r\n    }\r\n\r\n    doLogin(login, password) {\r\n        var theobject = this\r\n        var formparameters = {\r\n            method: 'POST', // or 'PUT'\r\n            body: JSON.stringify({'login' : login, 'password' : password}),\r\n            headers:{\r\n              'Content-Type': 'application/json',\r\n            }\r\n        }\r\n        console.log(formparameters);\r\n        console.log(\"loginserver --> \" + this.props.loginserver);\r\n  fetch(this.props.loginserver, formparameters).then(function(data) {\r\n            if(data.status!==200) {\r\n                theobject.failedauthenticated()\r\n                throw new Error(data.status)\r\n            }\r\n            else {\r\n                var json = data.json();\r\n                return json;\r\n            }\r\n  }).then(function(thetoken) {\r\n            console.log('message =', thetoken)\r\n            if ('token' in thetoken)\r\n                theobject.authenticated(thetoken['token'])\r\n  }).catch(function(error) {\r\n            console.log('There has been a problem with your fetch operation: ', error.message);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.errormessage != undefined)\r\n            var errormessage = <h2>{this.state.errormessage}</h2>\r\n        else\r\n            var errormessage = <div/>\r\n        if (this.state.token == undefined)\r\n            return (\r\n                <div>\r\n                    {errormessage}\r\n                    <Login parent={this} login={this.doLogin}/>\r\n                </div>\r\n            )\r\n        else\r\n            return (\r\n                <div>\r\n                    {errormessage}\r\n                    <Recording transcriberserver = {this.props.transcriberserver} token = {this.state.token}/>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nclass Final extends Component{\r\n    \r\n    render(){\r\n        return (\r\n            <Page loginserver=\"https://fx49oebdf7.execute-api.us-east-1.amazonaws.com/Production/login\" transcriberserver=\"https://fx49oebdf7.execute-api.us-east-1.amazonaws.com/Production/time\"/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Final;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Final from './login';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Final />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}